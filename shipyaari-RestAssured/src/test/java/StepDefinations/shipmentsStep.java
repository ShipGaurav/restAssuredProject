package StepDefinations;

import static io.restassured.RestAssured.given;

import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import org.junit.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import resources.TestDataBuild;

public class shipmentsStep {
    private static List<String> orderIds = new ArrayList<String>();

    static {
        regenerateOrderIds();
    }

    private static void regenerateOrderIds() {
        Random random = new Random();
        orderIds.clear();
        for (int i = 0; i < 10; i++) {
            int showMe = random.nextInt(100000, 10000000);
            String orderId = String.valueOf(showMe);
            orderIds.add(orderId);
        }
        Collections.shuffle(orderIds);
    }

    
    private String partnerId;
    private String partnerName;
    private String encodedData;
    private String encodedPartnerId;
    private Response response;
    private String channelName;

    @Given("a valid app_token is generated by calling the login API")
    public void a_valid_app_token_is_generated_by_calling_the_login_api() {
       
        this.partnerName = getPartnerName(partnerId);
        this.channelName="API";      
    }
    
    @Given("a partner with ID {string}")
    public void a_partner_with_id(String partnerId) {
        this.partnerId = partnerId;
    }

    
    @When("user calls create_consignment_API_B2C with POST http request")
    public void user_calls_create_consignment_api_with_post_http_request() {
        String orderId = generateOrderId();
        encodedData = Base64.getEncoder().encodeToString(orderId.getBytes());
        encodedPartnerId = Base64.getEncoder().encodeToString(partnerId.getBytes());

        RestAssured.baseURI = "https://staging.shipyaari.com";

        String requestBody = TestDataBuild.createconsigments(encodedData, encodedPartnerId, channelName);

        response = given()
                .queryParam("avnkey", "5934@5181")
                .header("Content-Type", "application/json")
                .body(requestBody)
                .log().all()
                .when().post("/webservice/create_consignment_api.php");
    }
    
    @When("user calls create_consignment_API_B2B with POST http request")
    public void user_calls_create_consignment_api_b2b_with_post_http_request() {
    	String orderId = generateOrderId();
        encodedData = Base64.getEncoder().encodeToString(orderId.getBytes());
        encodedPartnerId = Base64.getEncoder().encodeToString(partnerId.getBytes());

        RestAssured.baseURI = "https://seller.shipyaari.com";

        String requestBody = TestDataBuild.create_consignment_API_B2B(encodedData, encodedPartnerId);

        response = given()
                .queryParam("avnkey", "5934@5181")
                .header("Content-Type", "application/json")
                
                .body(requestBody)
                .log().all()
                .when().post("/avn_ci/siteadmin/shipment_api/consignment_b2b_prod");
    }
    
    @When("user calls create_reverse_consigments with POST http request")
    public void user_calls_create_reverse_consigments_with_post_http_request() {
    	String orderId = generateOrderId();
        encodedData = Base64.getEncoder().encodeToString(orderId.getBytes());
        encodedPartnerId = Base64.getEncoder().encodeToString(partnerId.getBytes());

        RestAssured.baseURI = "https://seller.shipyaari.com";

        String requestBody = TestDataBuild.create_reverse_consigments(encodedData, encodedPartnerId);

        response = given()
                .queryParam("avnkey", "5934@5181")
                .header("Content-Type", "application/json")
                
                .body(requestBody)
                .log().all()
                .when().post("/logistic/webservice/create_consignment_api.php");
    }
    
    	  
    @When("user calls crate_consigments_hyperlocal with POST http request")
    public void user_calls_crate_consigments_hyperlocal_with_post_http_request() {
       
    	String orderId = generateOrderId();
        encodedData = Base64.getEncoder().encodeToString(orderId.getBytes());
        encodedPartnerId = Base64.getEncoder().encodeToString(partnerId.getBytes());

        RestAssured.baseURI = "https://seller.shipyaari.com";

        String requestBody = TestDataBuild.crate_consigments_hyperlocal(encodedData, encodedPartnerId);

        response = given()
                .queryParam("avnkey", "5934@5181")
                .header("Content-Type", "application/json")
                
                .body(requestBody)
                .log().all()
                .when().post("/logistic/webservice/create_consignment_hyperlocal_api.php");
    }
    
    
    	
    @Then("the API call got success with status code 200")
    public void the_api_call_got_success_with_status_code_200() {
        response.then().statusCode(200).log().all();
    }

    @Then("\"status\" in response body is \"success\"")
    public void status_in_response_body_is_success() {
        String responseBody = response.getBody().asString();

        JsonPath jsonPath = new JsonPath(responseBody);
        String status = jsonPath.getString("status");
        System.out.println("Response Body: " + responseBody);
        System.out.println("Status: " + status);
        Assert.assertEquals("success", status);
    }
    
    @Then("verify trackingNumber created maps to {string} using {string}")
    public void verify_tracking_number_created_maps_to_using(String partnerName, String string2) {
   
        String responseBody = response.getBody().asString();
        JsonPath jsonPath = new JsonPath(responseBody);
        String trackingNumber = jsonPath.getString("tracking_number");
        System.out.println("Tracking Number: " + trackingNumber);
    }

    private String generateOrderId() {
        if (orderIds.isEmpty()) {
            regenerateOrderIds();
        }
        return orderIds.remove(0);
    }

    private static String getPartnerName(String partnerId) {
        if (partnerId.equals("2")) {
            return "DTDC";
        } else if (partnerId.equals("9")) {
            return "Delhivery";
        } else if (partnerId.equals("6406")) {
            return "Ekart";
        } else if (partnerId.equals("19467")) {
            return "Smartr";
        } else if (partnerId.equals("5161")) {
            return "XpressBees";
        } else if (partnerId.equals("9008")) {
            return "Shadowfax";
        } else if (partnerId.equals("2354")) {
            return "Bluedart";
        } else if (partnerId.equals("19537")) {
            return "Ecom Express";
        } else if (partnerId.equals("19550")) {
            return "Amazon (SWA)";
        } else if (partnerId.equals("19657")) {
            return "Shree Maruti Courier";
        } else if (partnerId.equals("5524")) {
            return "Shadowfax_Reverse";
        } else if (partnerId.equals("22449")) {
            return "Bluedart Reverse";
        } else if (partnerId.equals("11216")) {
            return "Delhivery_Reverse";
        } else if (partnerId.equals("8719")) {
            return "Delhivery B2B";
        } else if (partnerId.equals("16974")) {
            return "Bluedart - B2B";
        } else if (partnerId.equals("22361")) {
            return "SmartR B2B";
        } else if (partnerId.equals("16774")) {
            return "Xpressbees - B2B";
        } else {
            return "Unknown Partner";
        }
    }
}
